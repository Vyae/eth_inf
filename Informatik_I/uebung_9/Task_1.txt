a)
// PRE:  arr is an integer array of size N,
         i is an integer where 0 <= i < N
// POST: Returns the address of the i-th element of arr.
int* lookup(int arr[], const int i) {
  return arr+i;
}

b)
// PRE:  a, b, and res are valid pointers to integer values.
// POST: integer at location res contains the result of adding the integer at location a and the integer at location b.
void add(int* res, const int* a, const int* b) {
  *res = *a + *b;
  return;
}

c)
// PRE: a <= b are valid pointers to elements of the same array.
// POST: Returns the number of array elements in between those pointers (not including b).
int num_elem(const int* a, const int* b) {
  return b - a;
}

d)
// PRE:  str points to the start of a valid C-string (zero-terminated char array)
//       ch != 0 and of type char.
// POST: Returns the pointer to first array element that is equal to ch, otherwise return 0.
const char* first_char(const char* str, const char ch) {
    // hint: use natural iteration over str
    int i = 0;
    while(str[i] != '\0'){
      if(str[i] == ch){
        return str + i;
      }
    }
    return '\0';
}
